# ColorSensorProject Documentation

## Project Overview
This project integrates multiple sensors (flow, pressure, color/moisture, temperature, humidity, etc.) with a Raspberry Pi Zero.
 It collects, logs, and serves sensor data via HTTP endpoints using a Flask server. 
 The system is modular, with clear separation of plant, sets, and environment data, and is designed for robust operation and easy integration with a 
 higher-level controller (e.g., a Pi 4).

---

## Hardware
- **Raspberry Pi Zero** (main sensor node)
- **Sensors:**
  - Flow meter (digital pulse, GPIO 25)
  - Color sensor (TCS34725, I2C on GPIO 22=SCL, 27=SDA)
  - DHT22/AM2302 (temperature/humidity, GPIO 4)
  - (Planned) Soil temperature sensor
  - (Planned) Wind speed sensor
  - (Planned) Barometric pressure sensor
- **LED** (status, GPIO 17)

---

## GPIO Settings
- **FLOW_SENSOR_PIN:** GPIO 25 (BCM)
- **LED_PIN:** GPIO 17 (BCM)
- **DHT_PIN:** GPIO 4 (board.D4)
- **I2C:** SCL=GPIO 22, SDA=GPIO 27 (for color sensor)

---

## File Structure
```
ColorSensorProject/
├── analysis.py
├── calibrate_sticks.py
├── color_log.txt
├── color_logger_combined.py
├── color_logger_once.py
├── color_logger.py
├── combined_ColorSensor_snapshot.txt
├── config.json
├── controller_post_examples.txt
├── env_server.py         # Flask server for all endpoints
├── error_log.txt
├── flow_polling.py
├── health_server.py (legacy, not used)
├── logging_utils.py
├── MakeAISummary.py
├── networking.py
├── sensor.py
├── SensorMonitor.py      # Main sensor polling and POST logic
├── simple_Flow_sensor.py
├── stdout_log.txt
```

---

## Main Files and Functions

### SensorMonitor.py
- **Purpose:** Polls all sensors, aggregates data, and POSTs to Flask server endpoints.
- **Key Functions:**
  - `init_color_sensor()`: Initializes TCS34725 color sensor on I2C.
  - `read_color(sensor)`: Reads RGB and lux from color sensor.
  - `poll_flow_meter(duration_s)`: Counts pulses from flow meter to calculate flow.
  - `read_dht_sensor(dht_device)`: Reads temperature and humidity from DHT22.
  - `main()`: Main loop, posts plant, sets, and environment data to server.

### env_server.py
- **Purpose:** Flask server that receives, stores, and serves sensor data.
- **Endpoints:**
  - `/plant-latest`, `/plant-history`
  - `/sets-latest`, `/sets-history`
  - `/environment-latest`, `/environment-history`
  - (Legacy) `/env-latest`, `/env-history`, `/env-env-latest`, `/env-env-history`
- **Data Model:**
  - In-memory storage for latest and history of each data type (plant, sets, environment)
  - History limited to 1000 entries per type

---

## Data Models (JSON Examples)

### Plant Data
```
{
  "timestamp": "2025-06-13T12:34:56.789",
  "moisture": 123.4,
  "lux": 456.7,
  "soil_temperature": 22.5
}
```

### Sets Data
```
{
  "timestamp": "2025-06-13T12:34:56.789",
  "flow_pulses": 42,
  "flow_litres": 0.093,
  "pressure_kpa": 101.3
}
```

### Environment Data
```
{
  "timestamp": "2025-06-13T12:34:56.789",
  "temperature": 24.1,
  "humidity": 55.2,
  "wind_speed": 3.7,
  "barometric_pressure": 1008.2
}
```

---

## Network Addresses
- Pi (MQTT broker/controller):
  - IP: 100.116.147.6
  - Hostnames: pisprinkler, pisprinkler.taila79031.ts.net
- All sensor nodes should use 100.116.147.6 as the MQTT broker address unless otherwise noted.

---

## Usage

### 1. Start the Flask Server (on Pi Zero)
- Open a terminal and navigate to the project directory:
  ```bash
  cd ~/ColorSensorTest
  ```
- Start the server:
  ```bash
  python3 env_server.py
  ```
- The server will listen on port 8000 for HTTP requests.

### 2. Start the Sensor Monitor (on Pi Zero)
- In a separate terminal:
  ```bash
  python3 SensorMonitor.py
  ```
- This script will begin polling sensors and publishing data to the MQTT broker at 100.116.147.6.

### 3. Controller (e.g., Pi 4) Usage
- POST data to the server using the endpoints and JSON formats in `controller_post_examples.txt`.
- GET latest or historical data from the server using the `/plant-latest`, `/sets-latest`, `/environment-latest`, etc. endpoints.

---

## Notes
- The server stores data in memory only; restarting the server will clear all history.
- Add real sensor reading logic for soil temperature, wind speed, and barometric pressure as needed.
- For persistent server operation, consider running `env_server.py` as a systemd service.
- For troubleshooting, check `stdout_log.txt` and `error_log.txt` if present.

---

For further details, see comments in each script or ask for more documentation!
